<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.imxiaomai.persistence.mapper.VersionsMapper" >
  <resultMap id="BaseResultMap" type="com.imxiaomai.persistence.domain.Versions" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <id column="version" property="version" jdbcType="VARCHAR" />
    <id column="pubType" property="pubtype" jdbcType="VARCHAR" />
    <id column="type" property="type" jdbcType="VARCHAR" />
    <result column="flag" property="flag" jdbcType="INTEGER" />
    <result column="downloadUrl" property="downloadurl" jdbcType="VARCHAR" />
    <result column="versionDesc" property="versiondesc" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, version, pubType, type, flag, downloadUrl, versionDesc
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.imxiaomai.persistence.domain.VersionsExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from versions
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="com.imxiaomai.persistence.domain.Versions" >
    select 
    <include refid="Base_Column_List" />
    from versions
    where id = #{id,jdbcType=INTEGER}
      and version = #{version,jdbcType=VARCHAR}
      and pubType = #{pubtype,jdbcType=VARCHAR}
      and type = #{type,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.imxiaomai.persistence.domain.Versions" >
    delete from versions
    where id = #{id,jdbcType=INTEGER}
      and version = #{version,jdbcType=VARCHAR}
      and pubType = #{pubtype,jdbcType=VARCHAR}
      and type = #{type,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.imxiaomai.persistence.domain.VersionsExample" >
    delete from versions
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.imxiaomai.persistence.domain.Versions" >
    insert into versions (id, version, pubType, 
      type, flag, downloadUrl, 
      versionDesc)
    values (#{id,jdbcType=INTEGER}, #{version,jdbcType=VARCHAR}, #{pubtype,jdbcType=VARCHAR}, 
      #{type,jdbcType=VARCHAR}, #{flag,jdbcType=INTEGER}, #{downloadurl,jdbcType=VARCHAR}, 
      #{versiondesc,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.imxiaomai.persistence.domain.Versions" >
    insert into versions
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="version != null" >
        version,
      </if>
      <if test="pubtype != null" >
        pubType,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="flag != null" >
        flag,
      </if>
      <if test="downloadurl != null" >
        downloadUrl,
      </if>
      <if test="versiondesc != null" >
        versionDesc,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="version != null" >
        #{version,jdbcType=VARCHAR},
      </if>
      <if test="pubtype != null" >
        #{pubtype,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="flag != null" >
        #{flag,jdbcType=INTEGER},
      </if>
      <if test="downloadurl != null" >
        #{downloadurl,jdbcType=VARCHAR},
      </if>
      <if test="versiondesc != null" >
        #{versiondesc,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.imxiaomai.persistence.domain.VersionsExample" resultType="java.lang.Integer" >
    select count(*) from versions
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update versions
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.version != null" >
        version = #{record.version,jdbcType=VARCHAR},
      </if>
      <if test="record.pubtype != null" >
        pubType = #{record.pubtype,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null" >
        type = #{record.type,jdbcType=VARCHAR},
      </if>
      <if test="record.flag != null" >
        flag = #{record.flag,jdbcType=INTEGER},
      </if>
      <if test="record.downloadurl != null" >
        downloadUrl = #{record.downloadurl,jdbcType=VARCHAR},
      </if>
      <if test="record.versiondesc != null" >
        versionDesc = #{record.versiondesc,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update versions
    set id = #{record.id,jdbcType=INTEGER},
      version = #{record.version,jdbcType=VARCHAR},
      pubType = #{record.pubtype,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=VARCHAR},
      flag = #{record.flag,jdbcType=INTEGER},
      downloadUrl = #{record.downloadurl,jdbcType=VARCHAR},
      versionDesc = #{record.versiondesc,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.imxiaomai.persistence.domain.Versions" >
    update versions
    <set >
      <if test="flag != null" >
        flag = #{flag,jdbcType=INTEGER},
      </if>
      <if test="downloadurl != null" >
        downloadUrl = #{downloadurl,jdbcType=VARCHAR},
      </if>
      <if test="versiondesc != null" >
        versionDesc = #{versiondesc,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
      and version = #{version,jdbcType=VARCHAR}
      and pubType = #{pubtype,jdbcType=VARCHAR}
      and type = #{type,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.imxiaomai.persistence.domain.Versions" >
    update versions
    set flag = #{flag,jdbcType=INTEGER},
      downloadUrl = #{downloadurl,jdbcType=VARCHAR},
      versionDesc = #{versiondesc,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
      and version = #{version,jdbcType=VARCHAR}
      and pubType = #{pubtype,jdbcType=VARCHAR}
      and type = #{type,jdbcType=VARCHAR}
  </update>
  
  <select id="getNewestOne" resultMap="BaseResultMap" parameterType="com.imxiaomai.persistence.domain.Versions" >
    select 
    <include refid="Base_Column_List" />
    from versions
    where 1=1
     <if test="pubtype != null and pubtype != '' " >
       and pubType =  #{pubtype,jdbcType=VARCHAR}
     </if>
     <if test="type != null and type != '' " >
       and type =  #{type,jdbcType=VARCHAR}
     </if>
    order by version desc limit 1
  </select>
  
   <select id="getById" resultMap="BaseResultMap" parameterType="com.imxiaomai.persistence.domain.Versions" >
    select 
    <include refid="Base_Column_List" />
    from versions
    where 1=1
    and id = #{id,jdbcType=INTEGER}
    and type =  #{type,jdbcType=VARCHAR}
    and pubType =  #{pubtype,jdbcType=VARCHAR}
    limit 1
  </select>
  
  
  <select id="getByVersion" resultMap="BaseResultMap" parameterType="com.imxiaomai.persistence.domain.Versions" >
    select 
    <include refid="Base_Column_List" />
    from versions
    where 1=1
    and version = #{version,jdbcType=VARCHAR}
    and type =  #{type,jdbcType=VARCHAR}
    and pubType =  #{pubtype,jdbcType=VARCHAR}
    limit 1
  </select>
  
</mapper>